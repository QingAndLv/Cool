#coding:utf-8
from datetime import *
from WindPy import *
import re
import calendar
from dbfactory import DBFactory
import cx_Oracle
class WindProvider(object):
    def __init__(self):
        w.start()
        self.pattern = re.compile('^\D+')
        self.lastTradeDay=datetime.strptime('2018-01-01 00:00:00','%Y-%m-%d %H:%M:%S')
        self.dayDiff = timedelta(days=1)
        self.year=datetime.now().year
        with open('%s/list.txt' % self.getProjectPath(), 'r') as f:
            self.whole_last_symbol=eval(f.read())
            f.close()
    def getdate(self,symbol):  # x<y,6位的数字，ep:201801
        temp_symbol = self.pattern.findall(symbol)[0]
        temp_date = symbol.split('.')[0].split(temp_symbol)[1]
        if len(temp_date) == 3:
            temp_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")[2:3] + temp_date
        temp_date = datetime.strptime(temp_date, '%y%m').strftime("%Y-%m-%d %H:%M:%S")[:4] + temp_date[2:]
        return temp_date
    def getBars(self):
        objs = self.__getTotalTradingSymbols()
        availableSymbols = self.filterAvailableSymbols(objs)
        tradDay = self.lastTradeDay+self.dayDiff
        while tradDay<datetime.now():
            if tradDay.strftime("%w")=='0' or tradDay.strftime("%w")=='6':
                tradDay = tradDay + self.dayDiff
                continue
            symbolsLev3= self.__get3LevelSymbols(availableSymbols,str(tradDay.year)+'-'+str(tradDay.month)+'-'+str(tradDay.day))
            if len(symbolsLev3)==0:
                tradDay = tradDay + self.dayDiff
                continue
            symbolsLev31 = [symbolsLev3[i] for i in range(0, len(symbolsLev3) / 2)]
            symbolsLev32 = [symbolsLev3[i] for i in range(len(symbolsLev3) / 2, len(symbolsLev3))]
            bars1 = self.__getBarsBySymbol(symbolsLev31,str(tradDay.year)+'-'+str(tradDay.month)+'-'+str(tradDay.day))
            bars2 = self.__getBarsBySymbol(symbolsLev32,str(tradDay.year) + '-' + str(tradDay.month) + '-' + str(tradDay.day))
            bars=bars1+bars2
            DBFactory().saveBars(bars)
            print(tradDay,'tradDay')
            tradDay = tradDay+self.dayDiff
    def getLastTradeDay(self):
        tns = cx_Oracle.makedsn('IP', 1, 't')
        db = cx_Oracle.connect('c', 'p', tns)
        cr = db.cursor()
        sql = "SELECT MAX(TRAD_DT) FROM QUOTE_1MIN3 ORDER BY TRAD_DT"
        cr.execute(sql)
        return cr.fetchone()[0]  # 2018-08-15 23:58:00
    def getProjectPath(self):
        # str(__file__).rstrip(__file__.split('/')[-1])
        return "d:/";  #问题，相对路径
    def __getTotalTradingSymbols(self):
        objs=[]
        strr = w.wset("sectorconstituent", "date=%s;sectorid=1000028001000000;field=date,wind_code" % (datetime.now()))
        nation_code = strr.Data[1]
        temp_symbol = self.pattern.findall(nation_code[0])
        for i_number in range(1, len(nation_code)):
            temp_symbol = self.pattern.findall(nation_code[i_number])
            if self.whole_last_symbol.has_key(temp_symbol[0]) == False:
                self.whole_last_symbol[temp_symbol[0]] = []  # 初始化whole_last_symbol
        return nation_code
    def filterAvailableSymbols(self,nation_code):
        nation_number = 0
        temp_same_symbol = []
        while nation_number < len(nation_code):  # 遍历此symbol列表
            temp_symbol = self.pattern.findall(nation_code[nation_number])[0]
            temp_nation_symbol = nation_code[nation_number]
            if len(str(nation_code[nation_number])[:str(temp_nation_symbol).index('.')].split(temp_symbol)[1]) == 3:
                temp_nation_symbol = temp_symbol + '1' + str(nation_code[nation_number])[len(temp_symbol):]
            if '-' in nation_code[nation_number] or int(self.getdate(str(nation_code[nation_number])))<int(str(datetime.now().year)+'02') or temp_symbol=='SC':
                nation_number+=1
                continue
            temp_same_symbol.append(str(nation_code[nation_number]))  # 相同的symbol的元素放入此列表中
            nation_number += 1
        return temp_same_symbol
    def __get3LevelSymbols(self,temp_same_symbol,date):
        def cmp_personal(x, y):
            x_year = self.getdate(x)
            y_year = self.getdate(y)
            return int(x_year) - int(y_year)
        volume_list = w.wsd(temp_same_symbol, "volume", date, date, "ShowBlank=0").Data[0]
        volume_dict = {}
        whole_symbol=[]
        i_number=0
        if type(volume_list[0]) != float:
            return whole_symbol
        while i_number<len(temp_same_symbol):  # 此for创建字典
            volume_dict = {}
            if type(volume_list[i_number]) != float or volume_list[i_number] < 100:
                i_number+=1
                continue
            else:
                volume_dict[temp_same_symbol[i_number]] = volume_list[i_number]
            temp_symbol=self.pattern.findall(temp_same_symbol[i_number])[0]
            i_number+=1
            while i_number<len(temp_same_symbol):
                if type(volume_list[i_number]) != float or volume_list[i_number] < 100:
                    i_number+=1
                    continue
                if self.pattern.findall(temp_same_symbol[i_number])[0]==temp_symbol:
                    volume_dict[temp_same_symbol[i_number]]=volume_list[i_number]
                    i_number+=1
                else:
                    break
            volume_dict_list_end = []  # 这里用上面的列表代替volume_dict_list_end
            volume_dict_list = sorted(volume_dict.items(), key=lambda d: d[1],reverse=True)  # [('b', 4), ('c', 2), ('a', 1)]
            if len(volume_dict_list) != 0:
                if len(volume_dict_list) > 2:
                    volume_dict_list_end = [volume_dict_list[0][0], volume_dict_list[1][0], volume_dict_list[2][0]]
                else:
                    for volume_element in volume_dict_list:
                        volume_dict_list_end.append(volume_element[0])  # [('d','dd'),('dd','ddd')]
                volume_dict_list_end = sorted(volume_dict_list_end, cmp=cmp_personal)
                last_symbols = self.whole_last_symbol[temp_symbol]
                for j_temp in range(0, len(volume_dict_list_end)):
                    if len(last_symbols) > j_temp:
                        if cmp_personal(str(last_symbols[j_temp]),str(volume_dict_list_end[j_temp]))>0:
                            volume_dict_list_end = last_symbols
                            break
                        if j_temp == len(volume_dict_list_end) - 1:  # 如果在最后一次比较中last_symbols还小于temp_same_symbos，则该替换
                            self.whole_last_symbol[temp_symbol] = volume_dict_list_end
                            break
                    else:
                        self.whole_last_symbol[temp_symbol] = volume_dict_list_end
                        break
                whole_symbol=whole_symbol+volume_dict_list_end
        with open('D:\list.txt'.decode('utf-8').encode('gbk'), 'w') as f:
            f.truncate()
            f.write(str(self.whole_last_symbol))
            f.close()
        return whole_symbol
    def __getBarsBySymbol(self,symbols,date):
        objs=[]
        strr = w.wsi(symbols, "open,close,high,low,volume,oi", date + ' ' + '00:00:00', date + ' ' + '23:59:59',"ShowBlank=0")
        for i_time in range(0, len(strr.Times)):
            temp_symbol = self.pattern.findall(strr.Data[1][i_time])[0]
            if temp_symbol != 'SC':
                symbol = str(strr.Data[1][i_time]).split('.')[0]
                print(symbol,date)
                volume = strr.Data[6][i_time]
                if volume == 0:
                    continue
                if len(symbol.split(temp_symbol)[1]) == 3:
                    symbol = temp_symbol + '1' + symbol.split(temp_symbol)[1]
                factor = (
                    symbol, strr.Data[0][i_time], strr.Data[2][i_time], strr.Data[3][i_time], strr.Data[4][i_time],
                    strr.Data[5][i_time], volume, strr.Data[7][i_time])
                objs.append(factor)
        return objs
